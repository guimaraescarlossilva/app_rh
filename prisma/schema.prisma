// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["rh_db"]
}
  // Usuários do sistema
  model User {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
    name      String   @db.Text
    email     String   @unique @db.Text
    cpf       String   @unique @db.Text
    password  String   @db.Text
    active    Boolean  @default(true)
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamp

    // Relacionamentos
    userGroups   UserGroup[]
    userBranches UserBranch[]

    @@map("users")
    @@schema("rh_db")
  }

  // Filiais
  model Branch {
    id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
    fantasyName  String   @map("fantasy_name") @db.Text
    address      String   @db.Text
    phone        String?  @db.Text
    email        String?  @db.Text
    cnpj         String   @unique @db.Text
    city         String   @db.Text
    state        String   @db.Text
    neighborhood String   @db.Text
    zipCode      String   @map("zip_code") @db.Text
    active       Boolean  @default(true)
    createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp
    updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp

    // Relacionamentos
    userBranches UserBranch[]
    employees    Employee[]

    @@map("branches")
    @@schema("rh_db")
  }

  // Grupos de permissão
  model PermissionGroup {
    id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
    name        String   @unique @db.Text
    description String?  @db.Text
    createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp

    // Relacionamentos
    userGroups       UserGroup[]
    modulePermissions ModulePermission[]

    @@map("permission_groups")
    @@schema("rh_db")
  }

  // Relacionamento usuário-grupo
  model UserGroup {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
    userId    String   @map("user_id") @db.VarChar
    groupId   String   @map("group_id") @db.VarChar
    assignedAt DateTime @default(now()) @map("assigned_at") @db.Timestamp

    // Relacionamentos
    user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    group  PermissionGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

    @@unique([userId, groupId])
    @@map("user_groups")
    @@schema("rh_db")
  }

  // Relacionamento usuário-filial
  model UserBranch {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
    userId    String   @map("user_id") @db.VarChar
    branchId  String   @map("branch_id") @db.VarChar
    assignedAt DateTime @default(now()) @map("assigned_at") @db.Timestamp

    // Relacionamentos
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    branch Branch @relation(fields: [branchId], references: [id], onDelete: Cascade)

    @@unique([userId, branchId])
    @@map("user_branches")
    @@schema("rh_db")
  }

  // Permissões de módulos
  model ModulePermission {
    id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
    groupId    String  @map("group_id") @db.VarChar
    module     String  @db.Text
    canRead    Boolean @default(false) @map("can_read")
    canCreate  Boolean @default(false) @map("can_create")
    canUpdate  Boolean @default(false) @map("can_update")
    canDelete  Boolean @default(false) @map("can_delete")

    // Relacionamentos
    group PermissionGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

    @@unique([groupId, module])
    @@map("module_permissions")
    @@schema("rh_db")
  }

  // Cargos
  model JobPosition {
    id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
    name        String   @unique @db.Text
    description String?  @db.Text
    createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp

    // Relacionamentos
    employees Employee[]
    
    @@schema("rh_db")
  }

  // Funcionários
  model Employee {
    id                String      @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
    name              String      @db.Text
    cpf               String      @unique @db.Text
    email             String?     @db.Text
    phone             String?     @db.Text
    address           String?     @db.Text
    branchId          String      @map("branch_id") @db.VarChar
    positionId        String?     @map("position_id") @db.VarChar
    admissionDate     DateTime    @map("admission_date") @db.Date
    baseSalary        Decimal     @map("base_salary") @db.Decimal(10, 2)
    agreedSalary      Decimal     @map("agreed_salary") @db.Decimal(10, 2)
    advancePercentage Decimal     @default(40.00) @map("advance_percentage") @db.Decimal(5, 2)
    status            EmployeeStatus @default(ATIVO)
    createdAt         DateTime    @default(now()) @map("created_at") @db.Timestamp
    updatedAt         DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamp

    // Relacionamentos
    branch     Branch      @relation(fields: [branchId], references: [id])
    position   JobPosition? @relation(fields: [positionId], references: [id])
    vacations  Vacation[]
    terminations Termination[]
    advances   Advance[]
    payroll    Payroll[]

    @@schema("rh_db")
  }

  // Férias
  model Vacation {
    id                      String        @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
    employeeId              String        @map("employee_id") @db.VarChar
    acquisitionPeriodStart  DateTime      @map("acquisition_period_start") @db.Date
    acquisitionPeriodEnd    DateTime      @map("acquisition_period_end") @db.Date
    enjoymentStart          DateTime      @map("enjoyment_start") @db.Date
    enjoymentEnd            DateTime      @map("enjoyment_end") @db.Date
    enjoymentLimit          DateTime      @map("enjoyment_limit") @db.Date
    days                    Int
    status                  VacationStatus @default(PENDENTE)
    approvedAt              DateTime?     @map("approved_at") @db.Timestamp
    createdAt               DateTime      @default(now()) @map("created_at") @db.Timestamp

    // Relacionamentos
    employee Employee @relation(fields: [employeeId], references: [id])

    @@schema("rh_db")
  }

  // Demissões
  model Termination {
    id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
    employeeId    String   @map("employee_id") @db.VarChar
    terminationDate DateTime @map("termination_date") @db.Date
    reason        String   @db.Text
    createdAt     DateTime @default(now()) @map("created_at") @db.Timestamp

    // Relacionamentos
    employee Employee @relation(fields: [employeeId], references: [id])

    @@schema("rh_db")
  }

  // Adiantamentos
  model Advance {
    id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
    employeeId String   @map("employee_id") @db.VarChar
    month      Int
    year       Int
    amount     Decimal  @db.Decimal(10, 2)
    createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp

    // Relacionamentos
    employee Employee @relation(fields: [employeeId], references: [id])

    @@schema("rh_db")
  }

  // Folha de pagamento
  model Payroll {
    id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
    employeeId            String   @map("employee_id") @db.VarChar
    month                 Int
    year                  Int
    baseSalary            Decimal  @map("base_salary") @db.Decimal(10, 2)
    agreedSalary          Decimal  @map("agreed_salary") @db.Decimal(10, 2)
    advance               Decimal  @default(0) @db.Decimal(10, 2)
    nightShiftAdditional  Decimal  @default(0) @map("night_shift_additional") @db.Decimal(10, 2)
    nightShiftDsr         Decimal  @default(0) @map("night_shift_dsr") @db.Decimal(10, 2)
    overtime              Decimal  @default(0) @db.Decimal(10, 2)
    overtimeDsr           Decimal  @default(0) @map("overtime_dsr") @db.Decimal(10, 2)
    vacationBonus         Decimal  @default(0) @map("vacation_bonus") @db.Decimal(10, 2)
    fiveYearBonus         Decimal  @default(0) @map("five_year_bonus") @db.Decimal(10, 2)
    positionGratification Decimal  @default(0) @map("position_gratification") @db.Decimal(10, 2)
    generalGratification  Decimal  @default(0) @map("general_gratification") @db.Decimal(10, 2)
    cashierGratification  Decimal  @default(0) @map("cashier_gratification") @db.Decimal(10, 2)
    familyAllowance       Decimal  @default(0) @map("family_allowance") @db.Decimal(10, 2)
    holidayPay            Decimal  @default(0) @map("holiday_pay") @db.Decimal(10, 2)
    unhealthiness         Decimal  @default(0) @db.Decimal(10, 2)
    maternityLeave        Decimal  @default(0) @map("maternity_leave") @db.Decimal(10, 2)
    tips                  Decimal  @default(0) @db.Decimal(10, 2)
    others                Decimal  @default(0) @db.Decimal(10, 2)
    vouchers              Decimal  @default(0) @db.Decimal(10, 2)
    grossAmount           Decimal  @map("gross_amount") @db.Decimal(10, 2)
    inss                  Decimal  @default(0) @db.Decimal(10, 2)
    inssVacation          Decimal  @default(0) @map("inss_vacation") @db.Decimal(10, 2)
    irpf                  Decimal  @default(0) @db.Decimal(10, 2)
    unionFee              Decimal  @default(0) @map("union_fee") @db.Decimal(10, 2)
    absences              Decimal  @default(0) @db.Decimal(10, 2)
    absenceReason         String?  @map("absence_reason") @db.Text
    netAmount             Decimal  @map("net_amount") @db.Decimal(10, 2)
    status                String   @default("pendente")
    processedAt           DateTime? @map("processed_at") @db.Timestamp
    createdAt             DateTime @default(now()) @map("created_at") @db.Timestamp

    // Relacionamentos
    employee Employee @relation(fields: [employeeId], references: [id])

    @@schema("rh_db")
  }

  // Enums
enum EmployeeStatus {
  ATIVO
  INATIVO
  AFASTADO

  @@schema("rh_db")
}

  enum VacationStatus {
  PENDENTE
  APROVADO
  REJEITADO
  EM_GOZO

  @@schema("rh_db")
}
